__version__ = "1.0.0"
print "[LOADMOD] (aTechTree) UI v{}".format(__version__)
""" Techtree mods modList and modsSettings API """
import json, os, copy
import BigWorld
from gui.Scaleform.framework import ScopeTemplates, ViewSettings, g_entitiesFactories
from gui.Scaleform.framework.entities.View import View
from gui.Scaleform.framework.managers.loaders import SFViewLoadParams
from gui.Scaleform.locale.SETTINGS import SETTINGS
from gui.Scaleform.locale.VEH_COMPARE import VEH_COMPARE
from gui.shared.personality import ServicesLocator
from gui.shared.view_helpers.blur_manager import CachedBlur
from frameworks.wulf import WindowLayer
from debug_utils import LOG_ERROR, LOG_WARNING, LOG_CURRENT_EXCEPTION
COLUMNS = ('column1', 'column2')
VIEW_ALIAS = 'modsSettingsATT' 
# user configuration
_path = os.path.join('mods', 'configs', 'techtree')
if not os.path.exists(_path): os.makedirs(_path)
USER_SETTINGS_PATH = os.path.join('mods', 'configs', 'techtree', 'aTechTree.json')
# UI template data
_path = os.path.dirname(unicode(BigWorld.wg_getPreferencesFilePath(), 'utf-8', errors='ignore'))
if not os.path.exists(_path): os.makedirs(_path)
TEMPLATE_PATH = os.path.join(_path, 'jb_atechtree.dat')

def ascii_encode_dict(data):
    ascii_encode = lambda x: str(x) if isinstance(x, unicode) else x
    return dict(map(ascii_encode, pair) for pair in data.items())

# python controller class
class aUIcontrol():
    def __init__(self):
        g_entitiesFactories.addSettings(ViewSettings(VIEW_ALIAS, aUIwindow, 'modsSettingsWindow.swf', WindowLayer.OVERLAY, None, ScopeTemplates.GLOBAL_SCOPE))         
        self.modList = {}
        self.TPL = {}
        self.CFG = {}
        self.configLoad()
        
        _info = 'This mod allows you to easily configure installed techtree mods.'
        _png = 'gui/maps/icons/atechtree.png'
        try:    
            from gui.modsListApi import g_modsListApi
            g_modsListApi.addModification('jbATT', "TechTree", _info, _png, True, True, True, self.loadView)
        except:
            LOG_CURRENT_EXCEPTION()
        
    def loadView(self):
        ServicesLocator.appLoader.getDefLobbyApp().loadView(SFViewLoadParams(VIEW_ALIAS, VIEW_ALIAS), ctx=self)

    def configLoad(self):
        if os.path.exists(USER_SETTINGS_PATH):
            try:
                file = ""
                with open(USER_SETTINGS_PATH) as f:
                    for line in f: 
                        file += line.split("//")[0]                 
                    self.CFG = json.loads(file)
            except:
                LOG_WARNING()
        
        if os.path.exists(TEMPLATE_PATH):
            try:
                with open(TEMPLATE_PATH) as f:
                    self.TPL = json.load(f, object_hook=ascii_encode_dict)
            except:
                LOG_CURRENT_EXCEPTION()
        else:
            self.TMPsave()
            
    def TPLsave(self):
        try:
            with open(TEMPLATE_PATH, 'w') as f:
                json.dump(self.TPL, f, ensure_ascii=False, encoding='utf-8')
        except:
            LOG_CURRENT_EXCEPTION()
            
    def CFGsave(self):
        try:
            with open(USER_SETTINGS_PATH, 'w') as f:
                f.write("//Advanced TechTree Configuration File\n//GENERATED by in-game settings UI\n")
                json.dump(self.CFG, f, indent=4, separators=(',', ': '), ensure_ascii=False, encoding='utf-8')
        except:
            LOG_CURRENT_EXCEPTION()        

    def compareTemplates(self, newTemplate, oldTemplate):
        return newTemplate['UIver'] > oldTemplate['UIver'] if 'UIver' in newTemplate and 'UIver' in oldTemplate else True
        
    def getSettingsFromTemplate(self, mod, template):
        result = dict()
        for column in COLUMNS:
            if column in template:
                result.update(self.getSettingsFromColumn(template[column]))

        if 'enabled' in template:
            result['enabled'] = template['enabled']
        result.update((k, v) for k, v in self.getModSettings(mod).items() if k in result)
        self.CFG[mod] = result
        
    def getSettingsFromColumn(self, column):
        result = dict()
        for elem in column:
            if 'varName' in elem and 'value' in elem:
                result[elem['varName']] = elem['value']
        return result

    def setModTemplate(self, mod, template, callback, buttonHandler=None):
        try:
            self.modList[mod] = { "cb": callback, "bh": buttonHandler }
            currentTemplate = self.TPL.get(mod)
            if not currentTemplate or self.compareTemplates(template, currentTemplate):
                self.TPL[mod] = template
                self.TPLsave()
            
            self.getSettingsFromTemplate(mod, template)
            
            return self.getModSettings(mod)
        except:
            LOG_CURRENT_EXCEPTION()
        return
        
    def updateModSettings(self, newSettings):
        self.CFG.update(newSettings)
        for mod, data in newSettings.iteritems():
            print data
            callback = g_aTT.modList[mod]['cb']
        if callback:
            callback(data)
        print self.CFG['att']
        
    def getModSettings(self, mod):
        return self.CFG[mod] if mod in self.CFG.keys() else {}
        
    def cleanConfig(self):
        print "cleanConfig"
        print self.TPL.keys(), self.modList.keys()
        for key in self.TPL.keys():
            if not self.modList.get(key):
                del self.TPL[key]
                del self.CFG[key]
                
    def getTemplatesForUI(self):
        print "getTemplatesForUI"
        templates = copy.deepcopy(self.TPL)
        for mod, template in templates.items():
            settings = self.getModSettings(mod)
            template['enabled'] = settings.get('enabled', True)
            for column in COLUMNS:
                for component in template[column]:
                    if 'varName' in component:
                        sett = settings.get( component['varName'] )
                        if sett == None:
                            continue
                        component['value'] = sett
        return templates
        
    def updateTemplate(self, mod, varName, key, value):
        pass
        
    def genModApiStaticVO(self):
        return {'windowTitle': 'Techtree Mods Settings',
        'stateTooltip': '{HEADER}Enable / Disable mod {/HEADER}{BODY} Red indicator - mod disabled <br> Green indicator - mod enabled{/BODY}',
        'buttonOK': SETTINGS.OK_BUTTON,
        'buttonCancel': SETTINGS.CANCEL_BUTTON,
        'buttonApply': SETTINGS.APPLY_BUTTON,
        'buttonClose': VEH_COMPARE.HEADER_CLOSEBTN_LABEL,
        'popupColor': 'COLOR'}
      
class aUIwindow(View):
    def _populate(self):
        super(aUIwindow, self)._populate()
        self._blur = CachedBlur(enabled=True, ownLayer=WindowLayer.OVERLAY - 1)

    def _dispose(self):
        self._blur.fini()
        super(aUIwindow, self)._dispose()
        g_aTT.CFGsave()

    def sendModsData(self, data):
        print "sendModsData", data
        data = json.loads(data)
        g_aTT.updateModSettings(data)

    def buttonAction(self, id, varName, value):
        print "buttonAction", id, varName
        handler = g_aTT.modList[id]['bh']
        if callable(handler):
            handler(varName, value)
    
    def requestModsData(self):
        print "requestModsData"
        g_aTT.cleanConfig()
        self.as_setStaticDataS(g_aTT.genModApiStaticVO())
        self.as_setDataS(g_aTT.getTemplatesForUI())

    def as_setStaticDataS(self, data):
        print "as_setStaticDataS"
        if self._isDAAPIInited():
            self.flashObject.as_setStaticData(data)

    def as_setDataS(self, data):
        print "as_setDataS"
        if self._isDAAPIInited():
            self.flashObject.as_setData(data)

    def closeView(self):
        print "closeView"
        self.destroy()

    def onFocusIn(self, *args):
        print "onFocusIn"
        return False if self._isDAAPIInited() else None
    
g_aTT = aUIcontrol()